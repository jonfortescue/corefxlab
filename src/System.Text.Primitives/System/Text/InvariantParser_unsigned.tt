<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// NOTE: This file is generated via a T4 template. Please do not edit this file directly. Any changes should be made
// in InvariantParser_unsigned.tt.

using System.Diagnostics;
using System.Text.Utf8;

namespace System.Text
{
    public static partial class InvariantParser
    {
<#

string[] primitives = new string[] { "byte", "ushort", "uint", "ulong" };
string[] classes = new string[] { "Byte", "UInt16", "UInt32", "UInt64" };

for (int i = 0; i < primitives.Length; i++)
{
	#>
		#region <#= primitives[i] #>
		public static bool TryParse(byte[] utf8Text, int index, FormattingData cultureAndEncodingInfo, Format.Parsed numericFormat,
            out <#= primitives[i]  #> value, out int bytesConsumed)
		{
			// Precondition replacement
            if (utf8Text.Length < 1 || index < 0 || index >= utf8Text.Length)
            {
                value = default(<#= primitives[i] #>);
                bytesConsumed = 0;
                return false;
            }

            value = default(<#= primitives[i] #>);
            bytesConsumed = 0;

            if (cultureAndEncodingInfo.IsInvariantUtf8)
            {
                for (int byteIndex = index; byteIndex < utf8Text.Length; byteIndex++) // loop through the byte array
                {
                    byte nextByteVal = (byte)(utf8Text[byteIndex] - '0');
                    if (nextByteVal > 9) // if nextByteVal > 9, we know it is not a digit because any value less than '0' will overflow
										 // to greater than 9 since byte is an unsigned type.
                    {
                        if (bytesConsumed == 0) // check to see if we've processed any digits at all
                        {
                            return false;
                        }
                        else
                        {
                            return true; // otherwise return true
                        }
                    }
                    else if (value > <#= classes[i] #>.MaxValue / 10)
                    {
                        value = default(<#= primitives[i] #>);
                        bytesConsumed = 0;
                        return false;
                    }
                    // This next check uses a hardcoded 6 because the max values for unsigned types all end in 5s.
                    else if (value == <#= classes[i] #>.MaxValue / 10 &&  nextByteVal >= 6) // overflow
                    {
                        value = default(<#= primitives[i] #>);
                        bytesConsumed = 0;
                        return false;
                    }

                    value = (<#= primitives[i] #>)(value * 10 + nextByteVal); // left shift the value and add the nextByte
                    bytesConsumed++;
                }
				return true;
            }
            else if (cultureAndEncodingInfo.IsInvariantUtf16)
            {
                for (int byteIndex = index; byteIndex < utf8Text.Length - 1; byteIndex += 2) // loop through the byte array two bytes at a time for UTF-16
                {
                    byte byteAfterNext = utf8Text[byteIndex + 1];
                    byte nextByteVal = (byte)(utf8Text[byteIndex] - '0');
                    if (nextByteVal > 9 || byteAfterNext != 0)  // if the second byte isn't zero, this isn't an ASCII-equivalent code unit and we can quit here
																// if nextByteVal > 9, we know it is not a digit because any value less than '0' will overflow
																// to greater than 9 since byte is an unsigned type.
                    {
                        if (bytesConsumed == 0) // check to see if we've processed any digits at all
                        {
                            return false;
                        }
                        else
                        {
                            return true; // otherwise return true
                        }
                    }
                    else if (value > <#= classes[i] #>.MaxValue / 10)
                    {
                        value = default(<#= primitives[i] #>);
                        bytesConsumed = 0;
                        return false;
                    }
                    // This next check uses a hardcoded 6 because the max values for unsigned types all end in 5s.
                    else if (value == <#= classes[i] #>.MaxValue / 10 &&  nextByteVal >= 6) // overflow
                    {
                        value = default(<#= primitives[i] #>);
                        bytesConsumed = 0;
                        return false;
                    }

                    value = (<#= primitives[i] #>)(value * 10 + nextByteVal); // left shift the value and add the nextByte
                    bytesConsumed += 2;
                }
                return true;
            }
			else
            {
                int byteIndex = index;
                while (byteIndex < utf8Text.Length)
                {
                    byte result;
                    int bytesConsumedByCodingUnit = 0;
                    int codingUnitLength;
					int nodeIndex = -1, level = 0;
                    do
                    {
                        result = cultureAndEncodingInfo.ParseNextByte(utf8Text[byteIndex], out codingUnitLength, ref nodeIndex, ref level);
                        bytesConsumedByCodingUnit++;
                        byteIndex++;
                    } while (result == (byte)FormattingData.Symbol.Continue);
					if (!cultureAndEncodingInfo.VerifyCodeUnit(ref utf8Text, byteIndex, result, bytesConsumedByCodingUnit, codingUnitLength))
                        result = (int)FormattingData.Symbol.Invalid;

                    if (result > 9)
                    {
                        if (bytesConsumed == 0) // check to see if we've processed any digits at all
                        {
                            return false;
                        }
                        else
                        {
                            return true; // otherwise return true
                        }
                    }
                    else if (value > <#= classes[i] #>.MaxValue / 10)
                    {
                        value = default(<#= primitives[i] #>);
                        bytesConsumed = 0;
                        return false;
                    }
                    // This next check uses a hardcoded 6 because the max values for unsigned types all end in 5s.
                    else if (value == <#= classes[i] #>.MaxValue / 10 && result >= 6) // overflow
                    {
                        value = default(<#= primitives[i] #>);
                        bytesConsumed = 0;
                        return false;
                    }

                    value = (<#= primitives[i] #>)(value * 10 + result); // left shift the value and add the nextByte
                    bytesConsumed += codingUnitLength;
                    byteIndex += codingUnitLength - bytesConsumedByCodingUnit;
                }

                return true;
            }
        }

		public static unsafe bool TryParse(byte* utf8Text, int index, int length, FormattingData cultureAndEncodingInfo, Format.Parsed numericFormat, 
            out <#= primitives[i] #> value, out int bytesConsumed)
        {
            // Precondition replacement
            if (length < 1 || index < 0)
            {
                value = default(<#= primitives[i] #>);
                bytesConsumed = 0;
                return false;
            }

            value = default(<#= primitives[i] #>);
            bytesConsumed = 0;

            if (cultureAndEncodingInfo.IsInvariantUtf8)
            {
                for (int byteIndex = index; byteIndex < length + index; byteIndex++)
                {
                    byte nextByteVal = (byte)(utf8Text[byteIndex] - '0');
                    if (nextByteVal > 9) // if nextByteVal > 9, we know it is not a digit because any value less than '0' will overflow
										 // to greater than 9 since byte is an unsigned type.
                    {
                        if (bytesConsumed == 0)
                        {
                            return false;
                        }
                        else
                        {
                            return true;
                        }
                    }
                    else if (value > <#= classes[i] #>.MaxValue / 10) // overflow
                    {
                        value = default(<#= primitives[i] #>);
                        bytesConsumed = 0;
                        return false;
                    }
                    // This next check uses a hardcoded 6 because the max values for unsigned types all end in 5s.
                    else if (value == <#= classes[i] #>.MaxValue / 10 &&  nextByteVal >= 6) // overflow
                    {
                        value = default(<#= primitives[i] #>);
                        bytesConsumed = 0;
                        return false;
                    }
                    value = (<#= primitives[i] #>)(value * 10 + nextByteVal); // left shift the value and add the nextByte
                    bytesConsumed++; // increment the number of bytes consumed, then loop
                }
                return true;
            }
            else if (cultureAndEncodingInfo.IsInvariantUtf16)
            {
                for (int byteIndex = index; byteIndex < length + index - 1; byteIndex += 2) // loop through the byte array two bytes at a time for UTF-16
                {
                    byte byteAfterNext = utf8Text[byteIndex + 1];
                    byte nextByteVal = (byte)(utf8Text[byteIndex] - '0');
                    if (nextByteVal > 9 || byteAfterNext != 0) // if the second byte isn't zero, this isn't an ASCII-equivalent code unit and we can quit here
															   // if nextByteVal > 9, we know it is not a digit because any value less than '0' will overflow
															   // to greater than 9 since byte is an unsigned type.
                    {
                        if (bytesConsumed == 0) // check to see if we've processed any digits at all
                        {
                            return false;
                        }
                        else
                        {
                            return true; // otherwise return true
                        }
                    }
                    else if (value > <#= classes[i] #>.MaxValue / 10)
                    {
                        value = default(<#= primitives[i] #>);
                        bytesConsumed = 0;
                        return false;
                    }
                    // This next check uses a hardcoded 6 because the max values for unsigned types all end in 5s.
                    else if (value == <#= classes[i] #>.MaxValue / 10 &&  nextByteVal >= 6) // overflow
                    {
                        value = default(<#= primitives[i] #>);
                        bytesConsumed = 0;
                        return false;
                    }

                    value = (<#= primitives[i] #>)(value * 10 + nextByteVal); // left shift the value and add the nextByte
                    bytesConsumed += 2;
                }
                return true;
            }

            return false;
        }
		#endregion

<#
		}
#>
	}
}